name: Multi-OS Testing

on: ['push']

jobs:
  test:
    runs-on: ${{ matrix.os }} # Use the matrix to define the OS for each job
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.10']
      fail-fast: false # Continue running other jobs even if one fails

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies # Install pip and dependencies    
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests  # Run the tests using pytest
        run: python -m pytest tests/ --junitxml=results.xml # Generate JUnit XML report for test results  

      - name: Upload test results # Upload the test results as an artifact
        if: always()  
        uses: actions/upload-artifact@v4 
        with:
          name: pytest-results-${{ matrix.os }}-py${{ matrix.python-version }} # Name the artifact with OS and Python version
          path: results.xml
          if-no-files-found: error # Fail the job if no files are found
